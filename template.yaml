AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'WayTrek API - Serverless FastAPI application with RDS PostgreSQL'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: api.waytrek.app
    Description: Domain name for the API
  
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:291720501309:certificate/b6c9959b-422d-4927-be32-24f903b525d6
    Description: ACM Certificate ARN for SSL
  
  DBMasterUsername:
    Type: String
    Default: postgres
    Description: Database master username
  
  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Database master password

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        PROJECT_NAME: WayTrek API
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
        COGNITO_CLIENT_SECRET: !GetAtt CognitoUserPoolClient.ClientSecret
        S3_BUCKET_NAME: !Ref FileStorageBucket
        S3_REGION: !Ref AWS::Region
        DB_HOSTNAME: !GetAtt Database.Endpoint.Address
        DB_PORT: !GetAtt Database.Endpoint.Port
        DB_NAME: postgres
        DB_USER: !Ref DBMasterUsername
        DB_PASSWORD: !Ref DBMasterPassword

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'waytrek-${Environment}-users'
      UsernameAttributes: 
        - email
      AutoVerifiedAttributes: 
        - email
      EmailVerificationMessage: 'Please click the link below to verify your email address. {####}'
      EmailVerificationSubject: 'Verify your WayTrek account'
      UserPoolAddOns:
        AdvancedSecurityMode: ENFORCED
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
      UserPoolTags:
        Name: !Sub 'waytrek-${Environment}-user-pool'
        Environment: !Ref Environment

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub 'waytrek-${Environment}-client'
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${DomainName}/callback'
      LogoutURLs:
        - !Sub 'https://${DomainName}/logout'
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      RefreshTokenValidity: 30
      AccessTokenValidity: 24
      IdTokenValidity: 24
      PreventUserExistenceErrors: ENABLED

  # Cognito User Pool Domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'waytrek-${Environment}-auth'
      UserPoolId: !Ref CognitoUserPool

  # S3 Bucket for file storage
  FileStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'waytrek-${Environment}-files-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - !Sub 'https://${DomainName}'
            ExposedHeaders:
              - ETag
            MaxAge: 3600
      Tags:
        - Key: Name
          Value: !Sub 'waytrek-${Environment}-file-storage'
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy
  FileStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileStorageBucket
      PolicyDocument:
        Statement:
          - Sid: AllowLambdaAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt WayTrekFunctionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub '${FileStorageBucket}/*'
          - Sid: AllowLambdaListBucket
            Effect: Allow
            Principal:
              AWS: !GetAtt WayTrekFunctionRole.Arn
            Action:
              - s3:ListBucket
            Resource: !Ref FileStorageBucket

  # API Gateway
  WayTrekApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        Route53:
          HostedZoneId: !Ref HostedZone
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: !Sub "'https://${DomainName}'"
        AllowCredentials: true
      BinaryMediaTypes:
        - '*/*'

  # Lambda Function
  WayTrekFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WayTrekApi
            Path: /{proxy+}
            Method: ANY
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WayTrekApi
            Path: /
            Method: ANY
      Role: !GetAtt WayTrekFunctionRole.Arn
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub waytrek-api-${Environment}-ecr
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 30 images",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # VPC for RDS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-vpc

  # Private Subnets for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-private-subnet-2

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-db-subnet-group

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-rds-sg

  # RDS Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub waytrek-api-${Environment}-db
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: true
      Tags:
        - Key: Name
          Value: !Sub waytrek-api-${Environment}-db

  # IAM Role for Lambda Function
  WayTrekFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::${FileStorageBucket}/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt FileStorageBucket.Arn
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}

  # Route 53 Hosted Zone (optional - remove if you manage DNS elsewhere)
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName

  HostedZoneId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /waytrek-api/${Environment}/hosted-zone-id
      Type: String
      Value: !Ref HostedZone

Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub https://${WayTrekApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub waytrek-api-${Environment}-api-url

  CustomDomainUrl:
    Description: Custom domain URL
    Value: !Sub https://${DomainName}
    Export:
      Name: !Sub waytrek-api-${Environment}-domain-url

  ECRRepositoryURI:
    Description: ECR repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
    Export:
      Name: !Sub waytrek-api-${Environment}-ecr-uri

  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub waytrek-api-${Environment}-db-endpoint

  HostedZoneId:
    Description: Route 53 Hosted Zone ID
    Value: !Ref HostedZone
    Export:
      Name: !Sub waytrek-api-${Environment}-hosted-zone-id

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub waytrek-api-${Environment}-cognito-user-pool-id

  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub waytrek-api-${Environment}-cognito-client-id

  CognitoUserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name: !Sub waytrek-api-${Environment}-cognito-domain

  S3BucketName:
    Description: S3 bucket name for file storage
    Value: !Ref FileStorageBucket
    Export:
      Name: !Sub waytrek-api-${Environment}-s3-bucket-name

  S3BucketArn:
    Description: S3 bucket ARN for file storage
    Value: !GetAtt FileStorageBucket.Arn
    Export:
      Name: !Sub waytrek-api-${Environment}-s3-bucket-arn

  WayTrekFunctionName:
    Description: Lambda function name
    Value: !Ref WayTrekFunction
    Export:
      Name: !Sub waytrek-api-${Environment}-lambda-function-name