name: Deploy to AWS with SAM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  STACK_NAME: waytrek-api-production
  ENVIRONMENT: production

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        echo "Running tests..."
        # Add your test commands here when ready
        # pytest tests/
        
    - name: Run linting
      run: |
        echo "Running linting..."
        # Add linting commands here when ready
        # flake8 .
        
    - name: Security scan
      run: |
        pip install safety bandit
        safety scan --output json --save-json safety-report.json || true
        safety check || true
        bandit -r . -f json -o bandit-report.json || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        # Build the Docker image for Lambda
        docker build -t waytrek-api:latest .

    - name: SAM build
      run: |
        sam build --use-container

    - name: SAM deploy
      run: |
        sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name ${{ env.STACK_NAME }} \
          --resolve-s3 \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            DomainName=api.waytrek.app \
            CertificateArn=arn:aws:acm:us-east-1:291720501309:certificate/b6c9959b-422d-4927-be32-24f903b525d6 \
            DBMasterUsername=postgres \
            DBMasterPassword=${{ secrets.DB_MASTER_PASSWORD }}

    - name: Get stack outputs
      id: stack-outputs
      run: |
        ECR_REPO=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryURI`].OutputValue' \
          --output text)
        
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomDomainUrl`].OutputValue' \
          --output text)
        
        echo "ecr-repository=$ECR_REPO" >> $GITHUB_OUTPUT
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT

    - name: Build and push Docker image to ECR
      env:
        ECR_REPOSITORY: ${{ steps.stack-outputs.outputs.ecr-repository }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest

    - name: Update Lambda function
      run: |
        # Update the Lambda function with the new image
        aws lambda update-function-code \
          --function-name ${{ env.STACK_NAME }}-WayTrekFunction-* \
          --image-uri ${{ steps.stack-outputs.outputs.ecr-repository }}:${{ github.sha }} \
          --region ${{ env.AWS_REGION }} || echo "Lambda function update failed, but continuing..."

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        
        # Create a temporary Lambda function to run migrations
        aws lambda invoke \
          --function-name ${{ env.STACK_NAME }}-WayTrekFunction-* \
          --payload '{"httpMethod": "POST", "path": "/migrate", "body": "{\"action\": \"migrate\"}"}' \
          --region ${{ env.AWS_REGION }} \
          response.json || echo "Migration invoke failed, but continuing..."
        
        echo "Migration response:"
        cat response.json || echo "No response file found"

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "API URL: ${{ steps.stack-outputs.outputs.api-url }}"
        echo "ECR Repository: ${{ steps.stack-outputs.outputs.ecr-repository }}"
        echo "Stack Name: ${{ env.STACK_NAME }}"
        
        # Test the API endpoint
        echo "Testing API endpoint..."
        curl -f ${{ steps.stack-outputs.outputs.api-url }} || echo "API test failed, but deployment completed"