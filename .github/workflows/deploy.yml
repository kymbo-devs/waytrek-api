name: Deploy WayTrek API to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: waytrek-api
  ECS_SERVICE: waytrek-api
  ECS_CLUSTER: waytrek-api
  STACK_NAME: waytrek-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy SAM stack
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --region $AWS_REGION \
          --parameter-overrides \
            DbPassword=${{ secrets.DB_PASSWORD }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION

    - name: Wait for service deployment
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION

    - name: Get deployment status
      run: |
        # Get service status
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}'
        
        # Get load balancer DNS
        aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region $AWS_REGION \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text

    - name: Run health check
      run: |
        LB_DNS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region $AWS_REGION \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        
        echo "Load Balancer DNS: $LB_DNS"
        
        # Wait a bit for the deployment to stabilize
        sleep 30
        
        # Health check
        curl -f https://$LB_DNS/ || echo "Health check failed, but deployment completed"