name: Deploy WayTrek API to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: waytrek-api
  ECS_SERVICE: waytrek-api
  ECS_CLUSTER: waytrek-api
  STACK_NAME: waytrek-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check required secrets
      run: |
        if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
          echo "Error: DB_PASSWORD secret is not set"
          echo "Please add DB_PASSWORD to your GitHub repository secrets"
          exit 1
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION >/dev/null 2>&1 || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
        # Build for correct platform
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Also tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Deploy SAM stack
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --region $AWS_REGION \
          --parameter-overrides "DbPassword=${{ secrets.DB_PASSWORD }}" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Wait for ECS service to stabilize
      run: |
        echo "Waiting for ECS service to become stable..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60 || echo "Service may still be stabilizing"

    - name: Get deployment status and URL
      run: |
        echo "=== Deployment Status ==="
        
        # Get CloudFormation stack status
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region $AWS_REGION \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "STACK_NOT_FOUND")
        
        echo "Stack Status: $STACK_STATUS"
        
        # Get Load Balancer DNS for CNAME
        LB_DNS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region $AWS_REGION \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text 2>/dev/null || echo "NOT_AVAILABLE")
        
        if [ "$LB_DNS" != "NOT_AVAILABLE" ] && [ "$LB_DNS" != "None" ]; then
          echo "=== CNAME Configuration ==="
          echo "Point your DNS CNAME record for api.waytrek.app to: $LB_DNS"
          echo "Load Balancer DNS: $LB_DNS"
          
          # Try health check
          echo "=== Health Check ==="
          if curl -f -m 10 "https://$LB_DNS/" 2>/dev/null; then
            echo "✅ Health check passed!"
          else
            echo "⚠️  Health check failed (may need time to stabilize)"
          fi
        else
          echo "Load Balancer DNS not yet available"
        fi